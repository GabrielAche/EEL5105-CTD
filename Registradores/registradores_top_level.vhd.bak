library ieee;
use ieee.std_logic_1164.all;

entity registradores is
port(
		rst,clock1,clock2,en_pot,reset_pot: in std_logic;
		sel_pot: in std_logic_vector(9 downto 0);
		reg_open,reg_alarm,out_pot: out std_logic_vector(9 downto 0)
);
end entity;

architecture bhv of registradores is
signal saidaREG1,saidaREG2, saidaCombinacao, entradaREG3: std_logic_vector(9 downto 0);
component registrador is
	port(
		clk, reset, enable: in std_logic;
		d: in std_logic_vector(9 downto 0);
		q: out std_logic_vector(9 downto 0)
	);
end component;

component combinacao is
	port(
			entrada: in std_logic_vector(9 downto 0);
			saida: out std_logic_vector(9 downto 0)
	);
end component;

component DECOD is
	port(
			d: in std_logic_vector(9 downto 0);
			q: out std_logic_vector(9 downto 0)
	);
end component;

begin
reg_open <= saidaREG1;
reg_alarm <= saidaREG2;
REG1: registrador 
port map(
			clk => clock1,
			reset => rst,
			enable => '1',
			d => not(saidaREG1),
			q => saidaREG1
);
REG2: registrador 
port map(
			clk => clock2,
			reset => rst,
			enable => '1',
			d => saidaCombinacao,
			q => saidaREG2
);
REG3: registrador 
port map(
			clk => clock1,
			reset => reset_pot or rst,
			enable => en_pot,
			d => entradaREG3,
			q => out_pot
);
COMB: combinacao
port map(
			entrada => saidaREG2,
			saida => saidaCombinacao
);
DEC: DECOD
port map(
			d => sel_pot,
			q => entradaREG3
);

end bhv;